컨트롤러,서비스,모듈로 나눠진 구조
@로 데코레이터 만들고 데코레이터 다음에 바로 와야한다
컨트롤러에서 요청을 받고, 해당하는 데코레이터 내용인거로 받아서 리턴
@GET(':id')면 root에서 아무 수,string전부 해당되는걸로 받음. 이거 일치하는것만 찾고, 유저가 받는건
@Param,@body등으로 해야.

dto(data transformer object)로 data등에 타입부여. maid에서 app에 global pipeline설정.
new ValidationPipe()를 인자로 넣는다.
이후 DTO에서 내부 인자들이 설정된 타입인지 확인하는 @IsString등 사용
만약 하지 않으면 해당 인자들 없이도 생성가능.
ValidationPipe에 인자로 {}내에 transform: true로 넘겨주면 데이터 받아올떄와 내부 변수 설정이 달라도 변환함. string 으로 받아온거라도 number로 변환해줌.
update등 일부변수만 요하는 경우 extends PartialType(원DTO)로 설정해서
사용.
class validator에서 IsOptional데코레이터이하는 optional,즉 필수가 아닌거로 설정된다.

조직화하는 측면에서 당연히 app.module은 appcontroller..등 넣고
image.module은 imagecontroller..넣는식으로 분리해야.
하위 모듈을 appmodule에서 import해서 쓰는방식으로 조직화
즉 하위모듈은 main.ts있는 디렉토리에 하위폴더 만들고 넣은뒤 appmodule에서
import해 사용.
타입을 지정해 주기떄문에 module에서 contoller넘어갈때
service를(provider를) nestjs가 import하고 contoller에 inject