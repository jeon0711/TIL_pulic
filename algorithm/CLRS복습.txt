일반적으로 최적해를 찾는데 걸리는 시간이 직접찾는데 걸리는 시간보다 적다.
14.2
Matrix-chain multiplication
parenthesizations(괄호)
matrices is fully parenthesized if it is either a single matrix 
or the product of two fully parenthesized matrix products, surrounded by parentheses.
괄호묶는 방법에 따라 막대한 연산량차이발생

matrix-chain multiplication problem:
given a chain <A1,...An>of n matrices, where for i=1,...n, matrix Ai has dimension pi-1*pi, fully parentheisize the product A1,...An in a way that minimizes the number of scalar multiplications
(input is the sequence of dimensions <p0,...pn>.

The goal is only to determine an order for multiplying matrices that has the lowest cost.

Denote the number of alternative parenthesizations of a sequence of n matrices by P(n)
then P(n)=sum of(P(k)P(n-k))k=1~n-1
//행렬곱은 언제나 두 행렬의 곱이므로 마지막 product는 반드시 P(k)개,P(n-k)개의 곱이다.

카탈랑수는 C0=1,Cn+1=sumof(Cn*Cn-k)로 나타내지는 순서열이며 n번째
카탈랑 수 Cn=2nCn/n+1=2n!/(n+1)*n!이다.

카탈랑수는 위의 괄호매칭문제,n개노드 가진 이진트리의 수의 개수, n+2각형을 서로 겹치지 않는 대각선을 그려 삼각형으로 분할하는 방법의 수등을 나타낸다.

카탈랑수의 점화식을 가지고 일반생성함수(수열의 값을 계수로 두고 거듭제곱값을 항으로)를 만들고 제곱하면 위의 정의상 x^i의 계수가 Ci+1이 된다. 
따라서 x*f(x)^2+1=fx이므로 fx에 대한 이차방정식을 풀면
fx=1+-(1-4x)^1/2/2x이다. 이때 x=0일때 C0=1인 경계조건을 만족시키는 경우는
1-(1-4x)^1/2/2x뿐이며, 모든 조건을 만족하므로 이값이 fx이다. 그러나 
fx는 x에 관한 식이고 구하려는것은 최초의 형태꼴에서의 x의 계수이므로 fx에 대해 테일러전개를 해야한다. (1-4x)^1/2에 대해 테일러전개로 전개시켜 최종적으로 Ck*x^k꼴의 무한합으로 만들어 열거가능하고 일대일대응되므로 해당값인 Ck의 수열이 존재한다고 보는듯 하다.(이것 만 가능한지에 대한 증명까지 포함되는 증명인지는 모르겠다)

applying dynamic programming
step 1:the structure of optimal parenthesization
구간 i,j에서 k를 중심으로 좌,우측분할,
최종적으로 어떤 분할을 하던, 그 분할 내에서의 곱은 최적값이여야 한다. 그렇지 않으면 더 작은 값이 존재하므로 해당값으로의 분할시가 더 작은값을 리턴, 모순이 된다.(다른 분할들 전체보다 작지 않아도 괜찮다 결합시의 비용이 또 있으니)
따라서 최적부분구조를 가지고 어떻게 모델링할지도 알았다.
step2: A recursive solution:
m[i:j]=m[i,k]+m[k+1,j]+pi-1*pk*pj(행렬곱은 a행 b열 b행 c열로 곱해 a행 c열이 남으므로 i번째의 행(i-1번째의 열)*k번째열,k번째열*j번째열 의 곱이 된다. 결과 행렬의 i,j번째값은 앞의 행렬의 i행,뒤의 행렬의 j열의 곱이므로 k번의 곱,k번의 덧셈으로 나온다. 따라서 한번의 연산비용이O(k)이고 i,j번 하므로 총비용은 O(pi-1*pk*pj)가 된다)
이제 최적부분구조를 가지고 재귀해를 구했다
step 3:computing the optimal costs:
최적부분구조를 table을 이용해 기록해가며 계산한다.
상향식으로 가면 2개씩 묶었을때의 비용을 기록하고 다시 그것과 위로묶었을때의 비용중 최소값을 기록하고,,하는식으로 최종적으로 구간 전체가 될때까지 올라가되, 그떄의 분할위치도 기록한다.
step4: constructing an optimal solution:
최적 값을 가지는 분할위치 기록해둔 테이블 가지고 내려가며 나눠서 출력.

LCS문제
1.만약 마지막 문자가 같으면 그걸 LCS의 마지막 문자이고 앞부분의 LCS+이번 문자=LCS일것이다. 만약 두 문자가 다르고 lcs의 마지막 문자가 xk나 yk와 다르면 X나 Y의 앞부분 문자열의 LCS==지금LCS

2.따라서 x=y인경우 X,Y의 문자둘을 빼고, 아닌경우는 X를 빼고,Y를 뺀경우를 시험한다.
O(X,Y)=O(X-1,Y)+O(X,Y-1)이므로 한단계 내려갈때마다 2단계씩 파생, O(X,Y)=O(X-1,Y-1)+O(X-2,Y)+O(X-1,Y-1)+O(X,Y-2)...
총 시간복잡도는O(2^X+Y),
dp를 쓰면 이전연산의 결과로 새연산 내는게 O(1),최악의 경우에도 테이블의 크기를 벗어나지 않으므로 O(x*y)
따라서 C[i,j]=C[i-1,j-1] or max(C[i,j-1],c[i-1,j])
3.프로그램 짜기
4.구하기

14.4-4.
'항목(entries)'은 알고리즘에서 사용되는 메모리 공간 내에 저장되는 데이터 값의 수
n개항목 +1개(횟수기록)을 두고 1~m번까지 반복. k번째 n은 1~k까지 (m짜리문자열의) 1~n과의 최장길이. k-1번째의 n번째값혹은 k번째의 n-1번째값혹은 그중 +1된값중 최대값.

14-4.6
수열 전체길이가 n일때, 현재 1~k까지 부분수열을 잘라냈다 하자. 이떄 k-1번째까지의 부분수열의 단조증가수열의 최대길이가 l일때, dp는 1~l까지 각 길이의 단조증가수열의 마지막 값의 인덱스를 저장하고, 이 마지막값은 더 낮은 값이 있으면 해당 값으로 대체된다. 새로운값이 들어왔을떄 이것의 검색을 이분탐색으로 하면 O(nlgn)

14.5 Optimal binary search trees(최적이진탐색트리)
key가 검색될 확률을 value로가지고 leaf는 해당 키 사이값이 검색될 확률일때 검색의 예상비용(검색깊이*검색될 확률)이 최소값이 되도록하는 이진트리

구간 a,b를 키로 가지는 table만들어서
dp[a][b]면 a~b의 하위최적이진트리의 기댓값이게 한다.하나의 노드 선별하고 좌우로 나누면 좌우둘다 하위최적이진트리여야 하위최적이진트리일수 있다. 또한 구간별로 나눠지므로 구간으로 범주화 가능.

P.14-1
순환을 포함하지 않는 simple path인경우 최장경로는 이전까지의 경로+새로운 경로중 하나이다. 따라서 각 점들을 추가하며 구하는단순 최장가중경로 dp[a][b]에서 dp[a][b]+weight[b][c]들중 하나가 dp[a][c]이다.
14.2
마지막 변수를 포함하는 최장 부분 회문은 앞에서부터 동일한 문자 나올때까지 구간을 제외하므로 dp[i][j]+2가 된다. i는 같은문자 나온 다음 문자위치.혹은 dp[a][b-1], a+2=i부터 둘다 고려가능하므로 max dp[a][b-1],dp[a+i][b-1]이 최악의 경우라 해도 테이블의 개수 이상으로 연산할 필요 없으므로 l^2

14.3
dp[i][j]를 i에서 최대값까지 갔다 j로 돌아오는 거로 두면 dp[i-1][j]=dp[i+k][j]+sumof ditance d[i+k][i+k+1]중 최소값이다.
dp[i][j]=dp[j][i]이므로 순서를 고려치 않아도 된다.
따라서 dp[i][i]를 구하는데는 dp[i-1][i-1]이면 되고 매번 O(i)번의 연산 필요하고 총 n개의 항 채워야하므로 O(n^2)
여기부터