https://mochajs.org/참고

mocha가 실행되면 config file에서(있으면) 옵션들 가져옴. mocha가 command line의 옵션들 실행

Mocha가 Node.js 환경에서 실행될 때 "known flags"라고 언급하는 것은 Node.js 실행 가능 파일(node)에 전달될 수 있는 공식적으로 지원되는 명령줄 옵션들을 의미합니다. 이러한 플래그들은 Node.js의 실행 방식을 조정하거나 특정 기능을 활성화/비활성화하는 데 사용됩니다.

예를 들어, 다음과 같은 플래그들이 Node.js의 "known flags"에 포함될 수 있습니다:

--inspect나 --inspect-brk: 이 플래그들은 Node.js 애플리케이션의 디버깅을 위해 사용되며, 디버거 클라이언트가 Node.js 프로세스에 연결할 수 있는 방법을 제공합니다.
--require (또는 -r): 이 플래그는 Node.js가 실행될 때 특정 모듈을 사전에 로드하도록 지시합니다. 예를 들어, --require ts-node/register는 TypeScript 파일을 직접 실행할 수 있게 해줍니다.
--experimental-modules: 이 플래그는 실험적인 ES 모듈 지원을 활성화합니다.
Mocha가 이러한 "known flags"를 감지하면, Mocha는 Node.js를 자식 프로세스로 생성하고, 이 플래그들을 포함하여 자신(self)을 다시 실행합니다.

노드 실행 파일에 대한 알려진 플래그 확인: Mocha는 node 실행 파일에 대한 알려진 플래그가 있으면, 이러한 플래그를 사용하여 자기 자신을 자식 프로세스에서 실행합니다. 그렇지 않은 경우, 자식 프로세스를 생성하지 않습니다.

커스텀 리포터 및 인터페이스 유효성 검증: --require를 통해 로드된 커스텀 리포터나 인터페이스의 유효성을 Mocha가 검증합니다.

테스트 파일 발견: 파일이나 디렉토리를 지정하지 않으면, Mocha는 현재 작업 디렉토리에 상대적인 test 디렉토리에서 .js, .mjs, .cjs 확장자를 가진 파일을 찾습니다. 하위 디렉토리는 포함하지 않습니다.

인터페이스 로딩: 기본 인터페이스인 BDD는 테스트 파일을 특정 순서 없이 로드하고, 인터페이스별 글로벌 컨텍스트를 제공합니다(예: describe() 함수가 테스트 파일에서 글로벌로 사용될 수 있음).

테스트 파일 로딩 시 동작: Mocha는 테스트 파일을 로드할 때 모든 스위트를 실행하고, 그 안의 모든 훅과 테스트를 찾지만 실행하지는 않습니다.

루트 스위트: 최상위 훅, 테스트, 스위트는 모두 "보이지 않는" 루트 스위트의 멤버가 됩니다. 전체 프로세스에 대해 오직 하나의 루트 스위트만 존재합니다.

글로벌 설정 픽스처 실행: 설정된 글로벌 설정 픽스처가 있으면 실행합니다.

테스트 실행 과정:

"모든 테스트 전" 훅 실행
각 테스트에 대해:
"각 테스트 전" 훅 실행
테스트 실행 및 결과 보고
"각 테스트 후" 훅 실행
현재 스위트에 자식 스위트가 있으면, 각 자식 스위트에 대해 위의 단계 반복. 각 자식 스위트는 부모로부터 "각 테스트 전" 및 "각 테스트 후" 훅을 상속받습니다.
"모든 테스트 후" 훅 실행
최종 요약/에필로그 출력: 해당하는 경우, Mocha는 최종 요약이나 에필로그를 출력합니다.

글로벌 종료 픽스처 실행: 설정된 글로벌 종료 픽스처가 있으면 실행합니다. 